{
  "code": "import Dictionary from \"../util/Dictionary\";\r\nimport LoadingState from \"./state/LoadingState\";\r\nimport HomeState from \"./state/HomeState\";\r\nimport LevelState from \"./state/LevelState\";\r\nimport DebugLog from \"../util/DebugLog\";\r\nexport var GamePlayState;\r\n(function (GamePlayState) {\r\n    GamePlayState[GamePlayState[\"UnKnow\"] = 0] = \"UnKnow\";\r\n    GamePlayState[GamePlayState[\"Loading\"] = 1] = \"Loading\";\r\n    GamePlayState[GamePlayState[\"Home\"] = 2] = \"Home\";\r\n    GamePlayState[GamePlayState[\"Level\"] = 3] = \"Level\";\r\n})(GamePlayState || (GamePlayState = {}));\r\nexport default class GamePlayStateManager {\r\n    constructor() {\r\n        this.mFSMList = new Dictionary();\r\n        this.mFSMList.set(GamePlayState.Loading, new LoadingState);\r\n        this.mFSMList.set(GamePlayState.Home, new HomeState);\r\n        this.mFSMList.set(GamePlayState.Level, new LevelState);\r\n    }\r\n    static get inst() {\r\n        if (!GamePlayStateManager._instance) {\r\n            GamePlayStateManager._instance = new GamePlayStateManager();\r\n        }\r\n        return GamePlayStateManager._instance;\r\n    }\r\n    EnterGoalGameState(state) {\r\n        if (GamePlayStateManager.mCurrPlayState !== GamePlayState.UnKnow && state === GamePlayStateManager.mCurrPlayState) {\r\n            return;\r\n        }\r\n        this.ChangeState(state);\r\n    }\r\n    ChangeState(newState) {\r\n        GamePlayStateManager.mNewState = newState;\r\n        this.state = this.mFSMList.get(newState);\r\n        if (this.state) {\r\n            if (GamePlayStateManager.mCurrPlayState != GamePlayState.UnKnow)\r\n                this.mFSMList.get(GamePlayStateManager.mCurrPlayState).ExitState();\r\n            GamePlayStateManager.mPriorPlayState = GamePlayStateManager.mCurrPlayState;\r\n            GamePlayStateManager.mCurrPlayState = GamePlayStateManager.mNewState;\r\n            this.state.EnterState({ comCb: Laya.Handler.create(this, this.onComCallBack), errCb: Laya.Handler.create(this, this.onErrorCallBack) });\r\n        }\r\n    }\r\n    onComCallBack() {\r\n        DebugLog.log('进入新状态=====');\r\n    }\r\n    onErrorCallBack() {\r\n        if (GamePlayStateManager.mPriorPlayState !== GamePlayState.UnKnow) {\r\n            this.ChangeState(GamePlayStateManager.mPriorPlayState);\r\n        }\r\n    }\r\n    OnChangeComplete(succeed) {\r\n        if (succeed) {\r\n            if (GamePlayStateManager.mCurrPlayState != GamePlayState.UnKnow)\r\n                this.mFSMList.get(GamePlayStateManager.mCurrPlayState).onComplete();\r\n        }\r\n        else {\r\n            if (GamePlayStateManager.mCurrPlayState != GamePlayState.UnKnow)\r\n                this.mFSMList.get(GamePlayStateManager.mCurrPlayState).onError();\r\n        }\r\n    }\r\n}\r\nGamePlayStateManager.mCurrPlayState = GamePlayState.UnKnow;\r\nGamePlayStateManager.mPriorPlayState = GamePlayState.UnKnow;\r\nGamePlayStateManager.mNewState = GamePlayState.UnKnow;\r\n",
  "references": [
    "/Users/wanpp/workSpace/PureCore/PureCore/src/FSM/GameStateBase.ts",
    "/Users/wanpp/workSpace/PureCore/PureCore/src/util/Dictionary.ts",
    "/Users/wanpp/workSpace/PureCore/PureCore/src/FSM/state/LoadingState.ts",
    "/Users/wanpp/workSpace/PureCore/PureCore/src/FSM/state/HomeState.ts",
    "/Users/wanpp/workSpace/PureCore/PureCore/src/FSM/state/LevelState.ts",
    "/Users/wanpp/workSpace/PureCore/PureCore/src/util/DebugLog.ts"
  ]
}
