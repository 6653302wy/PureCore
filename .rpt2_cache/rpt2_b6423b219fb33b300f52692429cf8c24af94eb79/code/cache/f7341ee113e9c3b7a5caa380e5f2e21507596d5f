{
  "code": "import MoudleManager from \"../pureMvc/MoudleManager\";\r\nimport GlobalDefine from \"../GlobalDefine\";\r\nexport default class Helper {\r\n    constructor() {\r\n    }\r\n    static getSingle(c) {\r\n        let inst;\r\n        if (c.hasOwnProperty('_inst')) {\r\n            inst = c['_inst'];\r\n        }\r\n        if (!inst) {\r\n            inst = new c();\r\n            Object.defineProperty(c, '_inst', {\r\n                value: inst\r\n            });\r\n        }\r\n        return inst;\r\n    }\r\n    static isArray(array) {\r\n        return !!(array && array.constructor == Array);\r\n    }\r\n    static addMixSortToArr() {\r\n        if (!Array.prototype['shuffle']) {\r\n            Array.prototype['shuffle'] = function () {\r\n                for (var j, x, i = this.length; i; j = parseInt((Math.random() * i).toString()), x = this[--i], this[i] = this[j], this[j] = x)\r\n                    ;\r\n            };\r\n        }\r\n    }\r\n    static getNoRepeatListFromArr(arr, key = null) {\r\n        let temp = [];\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (!key) {\r\n                if (temp.indexOf(arr[i]) == -1)\r\n                    temp.push(arr[i]);\r\n            }\r\n            else {\r\n                if (temp.indexOf(arr[i][key]) == -1)\r\n                    temp.push(arr[i][key]);\r\n            }\r\n        }\r\n        return temp;\r\n    }\r\n    static deepCopy(obj) {\r\n        return JSON.parse(JSON.stringify(obj));\r\n    }\r\n    static deepCopyArr(arr) {\r\n        return arr.slice();\r\n    }\r\n    static StringParseToNumberArray(strSrc, splitChar) {\r\n        if (!strSrc)\r\n            return null;\r\n        let strarr = strSrc.split(splitChar);\r\n        let intArr = [];\r\n        for (let i = 0; i < strarr.length; i++) {\r\n            intArr.push(+strarr[i]);\r\n        }\r\n        return intArr;\r\n    }\r\n    static TimeLineFunction(times, funcs, complete) {\r\n        let time = 0;\r\n        for (let i = 0; i < funcs.length; i++) {\r\n            let intervalTime = i < times.length ? times[i] : 0;\r\n            time += intervalTime;\r\n            Laya.timer.once(time, this, () => {\r\n                let func = funcs[i][\"func\"];\r\n                let arg = funcs[i][\"arg\"];\r\n                func(arg);\r\n                if (i >= funcs.length - 1 && complete)\r\n                    complete();\r\n            });\r\n        }\r\n    }\r\n    static GetRandom(array) {\r\n        let ran_f = Math.random() * array.length;\r\n        let ran_i = Math.floor(ran_f);\r\n        return array[ran_i];\r\n    }\r\n    static GetRandomNumInt(min, max) {\r\n        let range = max - min;\r\n        let rand = Math.random();\r\n        return (min + Math.round(rand * range));\r\n    }\r\n    static GetRandomNum(min, max) {\r\n        let range = max - min;\r\n        let rand = Math.random();\r\n        return (min + rand * range);\r\n    }\r\n    static BezierTween(p0, p1, p2, obj, time, delayTime, ease, complete) {\r\n        class BazierPoint {\r\n            constructor(_p0, _p1, _p2, _obj) {\r\n                this.t = 0;\r\n                this.obj = _obj;\r\n                this.p0 = _p0;\r\n                this.p1 = _p1;\r\n                this.p2 = _p2;\r\n            }\r\n            get factor() {\r\n                return this.t;\r\n            }\r\n            set factor(value) {\r\n                this.t = value;\r\n                this.obj.x = (1 - value) * (1 - value) * this.p0.x + 2 * value * (1 - value) * this.p1.x + value * value * this.p2.x;\r\n                this.obj.y = (1 - value) * (1 - value) * this.p0.y + 2 * value * (1 - value) * this.p1.y + value * value * this.p2.y;\r\n            }\r\n        }\r\n        let bp = new BazierPoint(p0, p1, p2, obj);\r\n        let tw = Laya.Tween.to(bp, { factor: 1 }, time, ease, complete, delayTime, false);\r\n        return tw;\r\n    }\r\n    static getObjKeys(obj) {\r\n        let arr = [];\r\n        for (var key in obj) {\r\n            arr.push(key);\r\n        }\r\n        return arr;\r\n    }\r\n    static isImgRes(url) {\r\n        let imgs = ['png', 'jpg', 'jpeg', 'gif', 'bmp', 'webp'];\r\n        let suffix = this.getFileType(url);\r\n        return imgs.indexOf(suffix) != -1;\r\n    }\r\n    static isD3Res(url) {\r\n        let imgs = ['ls', 'lh'];\r\n        let suffix = this.getFileType(url);\r\n        return imgs.indexOf(suffix) != -1;\r\n    }\r\n    static isAtlasRes(url) {\r\n        let imgs = ['atlas'];\r\n        let suffix = this.getFileType(url);\r\n        return imgs.indexOf(suffix) != -1;\r\n    }\r\n    static getFileType(url) {\r\n        return Laya.Utils.getFileExtension(url);\r\n    }\r\n    static isIOS() {\r\n        let ua = window.navigator.userAgent;\r\n        return !!ua.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/);\r\n    }\r\n    static check_support_webp() {\r\n        if (Helper.isIOS) {\r\n            return false;\r\n        }\r\n        try {\r\n            return window.document.createElement('canvas').toDataURL('image/webp').indexOf('data:image/webp') == 0;\r\n        }\r\n        catch (err) {\r\n            return false;\r\n        }\r\n    }\r\n    static setLocalCache(key, val) {\r\n        Laya.LocalStorage.setItem(key, val);\r\n    }\r\n    static getLocalCache(key) {\r\n        return Laya.LocalStorage.getItem(key);\r\n    }\r\n    static deleteLocalCache(key) {\r\n        Laya.LocalStorage.removeItem(key);\r\n    }\r\n    static SendFacade(name, body, type) {\r\n        puremvc.Facade.getInstance().sendNotification(name, body, type);\r\n    }\r\n    static Handler(caller, fun, args = null, once = true) {\r\n        return Laya.Handler.create(caller, fun, args, once);\r\n    }\r\n    static openMod(names, params = null, dynamicUrls = null) {\r\n        if (names instanceof Array) {\r\n            let arr = [];\r\n            for (let i = 0; i < names.length; i++) {\r\n                let plguinObj = {};\r\n                plguinObj['key'] = names[i];\r\n                if (params && params[i])\r\n                    plguinObj['info'] = params[i];\r\n                if (dynamicUrls && dynamicUrls[i])\r\n                    plguinObj['dynaimcList'] = dynamicUrls[i];\r\n                arr.push(plguinObj);\r\n            }\r\n            MoudleManager.inst.StartModule(arr);\r\n        }\r\n        else {\r\n            MoudleManager.inst.StartModule({ key: names, info: params ? params : null, dynaimcList: dynamicUrls ? dynamicUrls : null });\r\n        }\r\n    }\r\n    static closeMod(names) {\r\n        if (names instanceof Array) {\r\n            names.forEach((name) => {\r\n                MoudleManager.inst.killModule(name);\r\n            });\r\n        }\r\n        else {\r\n            MoudleManager.inst.killModule(names);\r\n        }\r\n    }\r\n    static setLanType(type) {\r\n        let lan;\r\n        switch (type) {\r\n            case 'TW':\r\n            case 'HK':\r\n            case 'MO':\r\n                lan = 'tw';\r\n                break;\r\n            case 'CN':\r\n            case 'zh':\r\n                lan = 'cn';\r\n                break;\r\n            default:\r\n                lan = type;\r\n        }\r\n        GlobalDefine.Language = lan;\r\n    }\r\n    static getColorFilter(R, G, B) {\r\n        return new Laya.ColorFilter([\r\n            R / 255, 0, 0, 0, 0,\r\n            0, G / 255, 0, 0, 0,\r\n            0, 0, B / 255, 0, 0,\r\n            0, 0, 0, 1, 0\r\n        ]);\r\n    }\r\n}\r\n",
  "references": [
    "/Users/wanpp/workSpace/PureCore/PureCore/src/pureMvc/MoudleManager.ts",
    "/Users/wanpp/workSpace/PureCore/PureCore/src/GlobalDefine.ts"
  ]
}
