{
  "code": "import Dictionary from \"../util/Dictionary\";\r\nimport DebugLog from \"../util/DebugLog\";\r\nimport MultipleResCfgLoader from \"./MultipleResCfgLoader\";\r\nimport Helper from \"../util/Helper\";\r\nexport default class LoaderManager {\r\n    constructor() {\r\n        this.errHdrList = new Dictionary();\r\n        this.loaderList = new Dictionary();\r\n        this.isLoaing = false;\r\n        this.d2ResLoadCom = false;\r\n        this.d3ResLoadCom = false;\r\n        this.totalCheckTime = 20000;\r\n        this.checkRate = 5000;\r\n        Laya.loader.on(Laya.Event.ERROR, this, this.onLoaingError);\r\n    }\r\n    static get ins() {\r\n        return this._instance == null ? this._instance = new LoaderManager() : this._instance;\r\n    }\r\n    loadRes(url, comHdr = null, groupName = null, waitTime = 0, errHdr = null, isStatic = false, alwayscb = true) {\r\n        let groupKey;\r\n        if (url instanceof Array) {\r\n            let tempUrl = this.getRealUrl(url[0]) + '_group';\r\n            groupKey = groupName == null ? this.getRealUrl(tempUrl) : groupName;\r\n        }\r\n        else {\r\n            groupKey = groupName == null ? this.getRealUrl(url) : groupName;\r\n        }\r\n        if (this.checkAllLoaded(url)) {\r\n            DebugLog.log(groupKey + ' 已下载，直接返回回调。。');\r\n            if (comHdr)\r\n                comHdr.run();\r\n            return;\r\n        }\r\n        if (this.loaderList.get(groupKey)) {\r\n            let cb = this.loaderList.get(groupKey)['cb'];\r\n            if (cb && comHdr && (comHdr != cb)) {\r\n                groupKey += '_1';\r\n            }\r\n            else {\r\n                DebugLog.log('有重复提交的加载请求，请检查代码=======');\r\n                this.loadNext();\r\n                return;\r\n            }\r\n        }\r\n        this.loaderList.set(groupKey, { url: url, cb: comHdr, wait: waitTime, static: isStatic, needscb: alwayscb });\r\n        if (errHdr)\r\n            this.errHdrList.set(groupKey, { url: url, cb: errHdr });\r\n        this.loadNext();\r\n    }\r\n    loadResGroup(groupName, comHdr = null, waitTime = 0, errHdr = null, isStatic = false, alwayscb = true) {\r\n        let resList = MultipleResCfgLoader.getinstance().getResArray(groupName);\r\n        if (resList && resList.length)\r\n            this.loadRes(resList, comHdr, groupName, waitTime, errHdr, isStatic, alwayscb);\r\n    }\r\n    getRes(url) {\r\n        return Laya.loader.getRes(url);\r\n    }\r\n    clearRes(url, groupName = null) {\r\n        Laya.loader.clearRes(url);\r\n    }\r\n    cancleLoader(url) {\r\n        if (url instanceof Array)\r\n            Laya.loader.cancelLoadByUrls(url);\r\n        else\r\n            Laya.loader.cancelLoadByUrl(url);\r\n    }\r\n    loadNext() {\r\n        if (this.isLoaing)\r\n            return;\r\n        if (this.loaderList.keys.length == 0)\r\n            return;\r\n        this.curLoadGroup = this.loaderList.keys[0];\r\n        let loaderUrl = this.loaderList.get(this.curLoadGroup)['url'];\r\n        this.curWaitTime = this.loaderList.get(this.curLoadGroup)['wait'];\r\n        let d2ResList = [];\r\n        let d3ResList = [];\r\n        let addLoaderList = (url) => {\r\n            let tempUrl = this.getRealUrl(url);\r\n            if (Helper.isD3Res(tempUrl)) {\r\n                d3ResList.push(tempUrl);\r\n            }\r\n            else {\r\n                if (typeof url == 'string')\r\n                    d2ResList.push({ url: url, type: null });\r\n                else\r\n                    d2ResList.push(url);\r\n            }\r\n        };\r\n        if (loaderUrl instanceof Array) {\r\n            loaderUrl.forEach((url) => {\r\n                addLoaderList(url);\r\n            });\r\n        }\r\n        else {\r\n            addLoaderList(loaderUrl);\r\n        }\r\n        this.d2ResLoadCom = !Boolean(d2ResList.length);\r\n        this.d3ResLoadCom = !Boolean(d3ResList.length);\r\n        if (!this.d2ResLoadCom || !this.d3ResLoadCom)\r\n            this.startLoad(d2ResList, d3ResList);\r\n    }\r\n    startLoad(d2List, d3List) {\r\n        this.isLoaing = true;\r\n        this.startTime = new Date().getTime();\r\n        if (this.curWaitTime > 0)\r\n            Laya.timer.loop(10, this, this.waitingTimerHdr);\r\n        Laya.timer.loop(this.checkRate, this, this.checkLoadingStateHdr);\r\n        if (d2List.length)\r\n            Laya.loader.load(d2List, Helper.Handler(this, this.onD2LoadingComHdr), Laya.Handler.create(this, this.onLoadingProgressHdr, null, false), null, 1, true, this.curLoadGroup);\r\n        if (d3List.length)\r\n            Laya.loader.create(d3List, Helper.Handler(this, this.onD3LoadingComHdr), Laya.Handler.create(this, this.onLoadingProgressHdr, null, false));\r\n    }\r\n    onD2LoadingComHdr(result) {\r\n        if (result == null || result == false) {\r\n            DebugLog.log(this.curLoadGroup + ' 2d资源加载未完成。。');\r\n            if (!this.loaderList.get(this.curLoadGroup)['needscb']) {\r\n                this.stopCheck();\r\n                return;\r\n            }\r\n        }\r\n        this.d2ResLoadCom = true;\r\n        if (this.d2ResLoadCom && this.d3ResLoadCom) {\r\n            this.loadingComHdr(result);\r\n        }\r\n    }\r\n    onD3LoadingComHdr(result) {\r\n        if (result == null || result == false) {\r\n            DebugLog.log(this.curLoadGroup + ' 3d资源加载未完成。。');\r\n            if (!this.loaderList.get(this.curLoadGroup)['needscb']) {\r\n                this.stopCheck();\r\n                return;\r\n            }\r\n        }\r\n        this.d3ResLoadCom = true;\r\n        if (this.d2ResLoadCom && this.d3ResLoadCom) {\r\n            this.loadingComHdr(result);\r\n        }\r\n    }\r\n    loadingComHdr(res) {\r\n        this.isLoaing = false;\r\n        this.stopWaiting();\r\n        this.stopCheck();\r\n        let key = this.curLoadGroup;\r\n        let loadingUseTime = new Date().getTime() - this.startTime;\r\n        if (res) {\r\n            DebugLog.log(this.curLoadGroup + ' 加载完成，所用时长：' + loadingUseTime + ' ms');\r\n        }\r\n        else {\r\n            DebugLog.log(this.curLoadGroup + ' 加载未完成，所用时长：' + loadingUseTime + ' ms');\r\n        }\r\n        let cb = this.loaderList.get(this.curLoadGroup)['cb'];\r\n        let cb_1;\r\n        if (this.loaderList.get(this.curLoadGroup + '_1')) {\r\n            cb_1 = this.loaderList.get(this.curLoadGroup + '_1')['cb'];\r\n            this.loaderList.remove(this.curLoadGroup + '_1');\r\n        }\r\n        let waitTime = this.loaderList.get(this.curLoadGroup)['wait'];\r\n        this.loaderList.remove(this.curLoadGroup);\r\n        this.curLoadGroup = null;\r\n        this.loadNext();\r\n        if (cb_1)\r\n            cb_1.runWith(res);\r\n        if (cb) {\r\n            if (waitTime > 0 && loadingUseTime > (waitTime + 10)) {\r\n                DebugLog.log(key + ' 加载超过设定等待时间' + waitTime + ' ms ,不执行回调==');\r\n                return;\r\n            }\r\n            cb.runWith(res);\r\n        }\r\n    }\r\n    waitingTimerHdr() {\r\n        let loadingUseTime = new Date().getTime() - this.startTime;\r\n        if (loadingUseTime > this.curWaitTime) {\r\n            this.stopWaiting();\r\n            if (!this.checkAllLoaded(this.loaderList.get(this.curLoadGroup)['url'])) {\r\n                let cb = this.loaderList.get(this.curLoadGroup)['cb'];\r\n                DebugLog.log(this.curLoadGroup + ' 加载超过设定等待时间==,返回null');\r\n                if (cb)\r\n                    cb.runWith(null);\r\n            }\r\n        }\r\n    }\r\n    stopWaiting() {\r\n        this.curWaitTime = 0;\r\n        Laya.timer.clear(this, this.waitingTimerHdr);\r\n    }\r\n    checkLoadingStateHdr() {\r\n        this.totalCheckTime -= this.checkRate;\r\n        DebugLog.log(this.curLoadGroup + ' ===LD检测：', this.totalCheckTime);\r\n        if (this.totalCheckTime <= 0) {\r\n            this.stopCheck();\r\n            let urls = this.loaderList.get(this.curLoadGroup)['url'];\r\n            if (this.checkAllLoaded(urls)) {\r\n                DebugLog.log('检测到资源已全部下载完成--------', this.curLoadGroup);\r\n                if (urls instanceof Array) {\r\n                    this.loadingComHdr(true);\r\n                }\r\n                else {\r\n                    this.loadingComHdr(this.getRes(this.getRealUrl(urls)));\r\n                }\r\n            }\r\n            else {\r\n                DebugLog.log('加载超时未完成。。。。');\r\n            }\r\n        }\r\n    }\r\n    alertToRefresh() {\r\n        let alertStr = '加载超时未完成,检查资源路径或网络';\r\n        window.alert(alertStr);\r\n        location.reload();\r\n    }\r\n    stopCheck() {\r\n        Laya.timer.clear(this, this.checkLoadingStateHdr);\r\n        this.totalCheckTime = 20000;\r\n    }\r\n    onLoadingProgressHdr(pro) {\r\n    }\r\n    getFileType(url) {\r\n        return Laya.Utils.getFileExtension(url);\r\n    }\r\n    checkAllLoaded(urls) {\r\n        let bo = true;\r\n        let check = (url) => {\r\n            let res = this.getRealUrl(url);\r\n            if (!Laya.loader.getRes(res)) {\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n        if (urls instanceof Array) {\r\n            for (let i = 0; i < urls.length; i++) {\r\n                bo = check(urls[i]);\r\n                if (!bo)\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            bo = check(urls);\r\n        }\r\n        return bo;\r\n    }\r\n    getRealUrl(url) {\r\n        return typeof (url) == 'string' ? url : url['url'];\r\n    }\r\n    onLoaingError(errUrl) {\r\n        this.isLoaing = false;\r\n        Laya.loader.clearRes(errUrl);\r\n        let cb;\r\n        this.errHdrList.keys.forEach((key) => {\r\n            if (cb)\r\n                return false;\r\n            let loaderList = this.errHdrList.get(key);\r\n            let tempUrl;\r\n            if (loaderList.url instanceof Array) {\r\n                loaderList.url.forEach((data) => {\r\n                    tempUrl = this.getRealUrl(data);\r\n                    if (tempUrl == errUrl) {\r\n                        cb = loaderList.cb;\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                tempUrl = this.getRealUrl(loaderList.url);\r\n                if (tempUrl == errUrl) {\r\n                    cb = loaderList.cb;\r\n                    this.errHdrList.remove(key);\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n        if (cb)\r\n            cb.runWith(errUrl);\r\n    }\r\n}\r\nLoaderManager._instance = null;\r\n",
  "references": [
    "/Users/wanpp/workSpace/PureCore/PureCore/src/util/Dictionary.ts",
    "/Users/wanpp/workSpace/PureCore/PureCore/src/util/DebugLog.ts",
    "/Users/wanpp/workSpace/PureCore/PureCore/src/manager/MultipleResCfgLoader.ts",
    "/Users/wanpp/workSpace/PureCore/PureCore/src/util/Helper.ts"
  ]
}
