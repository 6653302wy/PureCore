{
  "code": "import DebugLog from \"../util/DebugLog\";\r\nimport LoaderManager from \"./LoaderManager\";\r\nexport default class MultipleResCfgLoader extends Laya.EventDispatcher {\r\n    constructor() {\r\n        super();\r\n        this.resGroupPool = {};\r\n    }\r\n    static getinstance() {\r\n        if (MultipleResCfgLoader._instance) {\r\n            return MultipleResCfgLoader._instance;\r\n        }\r\n        return MultipleResCfgLoader._instance = new MultipleResCfgLoader();\r\n    }\r\n    getResArray(groupName) {\r\n        MultipleResCfgLoader.CUR_GROUP_URLS = [];\r\n        MultipleResCfgLoader.CUR_GROUP_URLS_FORMAT = [];\r\n        if (this.resGroupPool[groupName]) {\r\n            return this.resGroupPool[groupName];\r\n        }\r\n        this.loadGroup(groupName);\r\n        this.resGroupPool[groupName] = MultipleResCfgLoader.CUR_GROUP_URLS_FORMAT;\r\n        return MultipleResCfgLoader.CUR_GROUP_URLS_FORMAT;\r\n    }\r\n    getNameFromPool(groupName) {\r\n        return this.resGroupPool[groupName];\r\n    }\r\n    loadGroup(groupName) {\r\n        if (!groupName.length) {\r\n            DebugLog.log(\"资源组名称不能为空！\" + groupName);\r\n            return \"\";\r\n        }\r\n        MultipleResCfgLoader.CUR_GROUP_NAME = groupName;\r\n        this.onLoaded();\r\n    }\r\n    onLoaded() {\r\n        if (!this.jsonData) {\r\n            this.jsonData = LoaderManager.ins.getRes(MultipleResCfgLoader.RES_GROUP);\r\n            LoaderManager.ins.clearRes(MultipleResCfgLoader.RES_GROUP);\r\n        }\r\n        this.initGroupKey(this.jsonData);\r\n    }\r\n    initGroupKey(json) {\r\n        if (!json) {\r\n            DebugLog.log(\"资源配置json文件读取错误！\");\r\n            return;\r\n        }\r\n        MultipleResCfgLoader.CUR_GROUP_KEYS = \"\";\r\n        var len = json.groups.length;\r\n        var group = null;\r\n        for (var i = 0; i < len; ++i) {\r\n            if (MultipleResCfgLoader.CUR_GROUP_NAME === json.groups[i].name) {\r\n                MultipleResCfgLoader.CUR_GROUP_KEYS = json.groups[i].keys;\r\n                group = json.groups[i];\r\n                break;\r\n            }\r\n        }\r\n        if (!group) {\r\n            DebugLog.log(MultipleResCfgLoader.CUR_GROUP_NAME + \" 资源组名字不存在！\");\r\n            return;\r\n        }\r\n        if (MultipleResCfgLoader.CUR_GROUP_KEYS === \"\") {\r\n            DebugLog.log(MultipleResCfgLoader.CUR_GROUP_NAME + \" 资源组内容为空！\");\r\n            return;\r\n        }\r\n        this.initResUrl(json);\r\n    }\r\n    initResUrl(json) {\r\n        if (!json || MultipleResCfgLoader.CUR_GROUP_KEYS === \"\")\r\n            return;\r\n        var keysArray = MultipleResCfgLoader.CUR_GROUP_KEYS.split(\",\");\r\n        var keyLen = keysArray.length, resLen = json.resources.length;\r\n        MultipleResCfgLoader.CUR_GROUP_URLS = [];\r\n        MultipleResCfgLoader.CUR_GROUP_URLS_FORMAT = [];\r\n        for (var i = 0; i < keyLen; ++i) {\r\n            var tempKey = keysArray[i];\r\n            for (var j = 0; j < resLen; ++j) {\r\n                var tempRes = json.resources[j];\r\n                if (tempRes.type === \"atlas\" && tempRes.name === tempKey) {\r\n                    MultipleResCfgLoader.CUR_GROUP_URLS.push(tempRes.url);\r\n                    MultipleResCfgLoader.CUR_GROUP_URLS_FORMAT.push({ url: tempRes.url, type: Laya.Loader.ATLAS });\r\n                    break;\r\n                }\r\n                else if (tempRes.type === \"json\" && tempRes.name === tempKey) {\r\n                    MultipleResCfgLoader.CUR_GROUP_URLS.push(tempRes.url);\r\n                    MultipleResCfgLoader.CUR_GROUP_URLS_FORMAT.push({ url: tempRes.url, type: Laya.Loader.JSON });\r\n                }\r\n                else if (tempRes.type === \"sound\" && tempRes.name === tempKey) {\r\n                    MultipleResCfgLoader.CUR_GROUP_URLS.push(tempRes.url);\r\n                    MultipleResCfgLoader.CUR_GROUP_URLS_FORMAT.push({ url: tempRes.url, type: Laya.Loader.SOUND });\r\n                }\r\n                else if (tempRes.type === \"xml\" && tempRes.name === tempKey) {\r\n                    MultipleResCfgLoader.CUR_GROUP_URLS.push(tempRes.url);\r\n                    MultipleResCfgLoader.CUR_GROUP_URLS_FORMAT.push({ url: tempRes.url, type: Laya.Loader.XML });\r\n                }\r\n                else if ((tempRes.type === \"buffer\" || tempRes.type === \"sprite3d\") && tempRes.name === tempKey) {\r\n                    MultipleResCfgLoader.CUR_GROUP_URLS.push(tempRes.url);\r\n                    MultipleResCfgLoader.CUR_GROUP_URLS_FORMAT.push({ url: tempRes.url, type: Laya.Loader.BUFFER });\r\n                }\r\n                else if (tempRes.type === \"image\" && tempRes.name === tempKey) {\r\n                    MultipleResCfgLoader.CUR_GROUP_URLS.push(tempRes.url);\r\n                    MultipleResCfgLoader.CUR_GROUP_URLS_FORMAT.push({ url: tempRes.url, type: Laya.Loader.IMAGE });\r\n                }\r\n                else if (tempRes.name === tempKey) {\r\n                    var isJpgFormat = this.isJpgFormat(tempRes.name);\r\n                    if (isJpgFormat) {\r\n                        MultipleResCfgLoader.CUR_GROUP_URLS.push(tempRes.url);\r\n                        MultipleResCfgLoader.CUR_GROUP_URLS_FORMAT.push({ url: tempRes.url, type: Laya.Loader.IMAGE });\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    isJpgFormat(str) {\r\n        if (str) {\r\n            var len = str.length;\r\n            if (len <= 3)\r\n                return false;\r\n        }\r\n        if (\"jpg\" === (str[len - 3] + str[len - 2] + str[len - 1]) || \"ebp\" == (str[len - 3] + str[len - 2] + str[len - 1])) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nMultipleResCfgLoader.RES_GROUP = \"resGroup.json\";\r\nMultipleResCfgLoader.CUR_GROUP_NAME = \"\";\r\nMultipleResCfgLoader.CUR_GROUP_KEYS = \"\";\r\nMultipleResCfgLoader.CUR_GROUP_URLS = [];\r\nMultipleResCfgLoader.CUR_GROUP_URLS_FORMAT = [];\r\nMultipleResCfgLoader._instance = null;\r\n",
  "references": [
    "/Users/wanpp/workSpace/PureCore/PureCore/src/util/DebugLog.ts",
    "/Users/wanpp/workSpace/PureCore/PureCore/src/manager/LoaderManager.ts"
  ]
}
