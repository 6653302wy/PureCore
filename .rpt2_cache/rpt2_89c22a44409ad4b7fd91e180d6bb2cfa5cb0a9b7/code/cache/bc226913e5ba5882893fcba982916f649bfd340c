{
  "code": "import MultipleResCfgLoader from \"../manager/MultipleResCfgLoader\";\r\nimport LoaderManager from \"../manager/LoaderManager\";\r\nimport DebugLog from \"../util/DebugLog\";\r\nexport default class MoudleManager extends Laya.EventDispatcher {\r\n    constructor() {\r\n        super();\r\n        this.regModules = {};\r\n        this._moduleDynamicList = {};\r\n        this._loadModuleLen = 0;\r\n        this.loadingModules = [];\r\n        this._info = {};\r\n        this.moduleIsLoading = false;\r\n    }\r\n    static get inst() {\r\n        return this._instance == null ? this._instance = new MoudleManager() : this._instance;\r\n    }\r\n    setup(s, fa) {\r\n        this._stage = s;\r\n        this._fa = fa;\r\n    }\r\n    registerModule(key, commandClassRef) {\r\n        this.regModules[key + \"\"] = commandClassRef;\r\n    }\r\n    StartModule(plugins) {\r\n        if (plugins instanceof Array) {\r\n            this._loadModuleLen = plugins.length;\r\n            plugins.forEach((obj) => {\r\n                this.addModule(obj.key, obj.info ? obj.info : null, obj.dynaimcList ? obj.dynaimcList : null);\r\n            });\r\n        }\r\n        else {\r\n            this._loadModuleLen = 1;\r\n            this.addModule(plugins.key, plugins.info ? plugins.info : null, plugins.dynaimcList ? plugins.dynaimcList : null);\r\n        }\r\n        this.startLoad();\r\n    }\r\n    addModule(key, param = null, dynamicLoading = null) {\r\n        let item = { key: key, info: param, dynamicList: dynamicLoading };\r\n        this.loadingModules.push(item);\r\n    }\r\n    startLoad() {\r\n        this.loadNext();\r\n    }\r\n    loadNext() {\r\n        if (this.modules == null) {\r\n            this.modules = {};\r\n        }\r\n        if (this.moduleIsLoading)\r\n            return;\r\n        if (this.loadingModules.length) {\r\n            let item = this.loadingModules.shift();\r\n            let key = item[\"key\"];\r\n            this._info[key] = item[\"info\"];\r\n            this._moduleDynamicList[key] = item[\"dynamicList\"];\r\n            let p = this.getModule(key);\r\n            if (!p) {\r\n                p = this.newModuleByKey(key);\r\n                if (p) {\r\n                    this.modules[key] = p;\r\n                    this.loadModule(p, key);\r\n                }\r\n                else {\r\n                    this.loadNext();\r\n                }\r\n            }\r\n            else {\r\n                p.start(this._fa, this._info[key]);\r\n                this.loadNext();\r\n            }\r\n        }\r\n    }\r\n    loadModule(p, key) {\r\n        let resList = p.getResGroup();\r\n        DebugLog.log(key + ' 模块所需资源组列表====', resList.toString());\r\n        let resArray = [];\r\n        resList.forEach((resKey) => {\r\n            let arr = MultipleResCfgLoader.getinstance().getResArray(resKey);\r\n            resArray = resArray.concat(arr);\r\n        });\r\n        let dynamicRes = this._moduleDynamicList[key];\r\n        if (dynamicRes && dynamicRes.length)\r\n            resArray = resArray.concat(dynamicRes);\r\n        if (resArray.length > 0) {\r\n            LoaderManager.ins.loadRes(resArray, Laya.Handler.create(this, this.startModule, [p, key]), key);\r\n        }\r\n        else {\r\n            this._loadModuleLen--;\r\n            this.moduleIsLoading = false;\r\n            this.startModule(p, key);\r\n        }\r\n    }\r\n    startModule(curMod, key) {\r\n        this.moduleIsLoading = false;\r\n        if (curMod) {\r\n            DebugLog.log('启动模块 。。' + key);\r\n            curMod.start(this._fa, this._info[key]);\r\n            curMod = null;\r\n        }\r\n        this.loadNext();\r\n    }\r\n    killModule(key) {\r\n        var p = this.modules[key];\r\n        if (p) {\r\n            DebugLog.log('销毁模块=====', key);\r\n            p.dispose();\r\n            delete this.modules[key];\r\n        }\r\n    }\r\n    clearResGroup(key) {\r\n        LoaderManager.ins.clearRes(null, key);\r\n    }\r\n    checkMoudleExist(key) {\r\n        var p = this.getModule(key);\r\n        if (p) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    killAllModule() {\r\n        for (let key in this.modules) {\r\n            this.killModule(key);\r\n        }\r\n    }\r\n    getModule(key) {\r\n        if (this.modules == null)\r\n            return null;\r\n        var p = this.modules[key];\r\n        return p;\r\n    }\r\n    newModuleByKey(key) {\r\n        var p;\r\n        var commandClassRef = this.regModules[key + \"\"];\r\n        if (commandClassRef) {\r\n            p = new commandClassRef();\r\n        }\r\n        return p;\r\n    }\r\n}\r\nMoudleManager._instance = null;\r\n",
  "references": [
    "/Users/wanpp/workSpace/PureCore/PureCore/src/pureMvc/core/IManager.ts",
    "/Users/wanpp/workSpace/PureCore/PureCore/src/pureMvc/core/IModule.ts",
    "/Users/wanpp/workSpace/PureCore/PureCore/src/manager/MultipleResCfgLoader.ts",
    "/Users/wanpp/workSpace/PureCore/PureCore/src/manager/LoaderManager.ts",
    "/Users/wanpp/workSpace/PureCore/PureCore/src/util/DebugLog.ts"
  ]
}
